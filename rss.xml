<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Sirens007&apos;s</title><description>Blog</description><link>https://sirens007.github.io/</link><language>zh_CN</language><item><title>Git基础学习</title><link>https://sirens007.github.io/posts/git%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C/</link><guid isPermaLink="true">https://sirens007.github.io/posts/git%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C/</guid><description>一篇关于 Git 使用经验的文章.</description><pubDate>Wed, 27 Aug 2025 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;📝以自己经验用Git&lt;/h2&gt;
&lt;h3&gt;1.Git基础概念&lt;/h3&gt;
&lt;p&gt;Git = word写文档	GitHub = 腾讯文档分享协作&lt;/p&gt;
&lt;p&gt;Git三个区域&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;工作区（Working Directory）—— 你正在编辑的文件
  ↓ git add
暂存区（Staging Area）—— 即将提交的快照
  ↓ git commit
版本库（Repository）—— Git 保存的历史记录
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;完整的开发流程通常是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 修改代码
git add 文件名             # 添加文件到暂存区
git commit -m &quot;说明信息&quot;   # 提交暂存区到版本库
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3&gt;2.本地 Git 仓库操作&lt;/h3&gt;
&lt;p&gt;以下内容是指在终端中使用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git config --global user.name &quot;待填入名字&quot;
git config -- global user.email &quot;待填入邮箱&quot;	#建议使用注册GitHub的用户名和邮箱，便于同步
                                  # --global 表示在你这台电脑上的所有仓库都使用这套设置。

git init #建立Git仓库，初始化Git仓库
         #或者从GitHub上拉一个项目（如刚创建了远程仓库）
git clone https://github.com/Sirens007/MyStorage.git

#如创建一个新文件
echo &quot;#我的第一个项目&quot; &amp;gt; README.md
#添加到Git暂存区
git add README.md
#提交到本地仓库
git commit -m &quot;添加了README文件&quot;
#绑定 GitHub 仓库作为远程仓库 origin	（即origin为远程仓库昵称）
git remote add origin https://github.com/Sirens007/MyStorage.git
#首次推送GitHub
git push -u origin main #如果提示 main 不存在，可以先用 git branch -M main 把默认的 master 分支改名。

git status
#查看当前工作状态 （如查看还未暂存的文件
git log
#查看提交历史

&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3&gt;3.查看状态与差异&lt;/h3&gt;
&lt;p&gt;当你已经完成了基本的 &lt;code&gt;add&lt;/code&gt; 和 &lt;code&gt;commit&lt;/code&gt; 操作后，日常开发中你最常用的两个命令是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git status&lt;/code&gt;：查看当前仓库状态&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git diff&lt;/code&gt;：查看文件内容发生了哪些改动&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;一、git status —— 查看状态&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git status
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;作用：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;查看当前工作区和暂存区的状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原理解释：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Git 会比较这三者的内容是否一致：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;工作目录中的文件&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;暂存区中的文件（通过 git add 添加的）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最后一次提交的版本（历史）&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;lt;details class=&quot;lake-collapse&quot;&amp;gt;
&amp;lt;summary id=&quot;u29606243&quot;&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;span class=&quot;ne-text&quot;&amp;gt;结果分析&amp;lt;/span&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;/summary&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;h4 id=&quot;98be1ecf&quot;&amp;gt;&amp;lt;span class=&quot;ne-text&quot; style=&quot;color: #DF2A3F&quot;&amp;gt;🔴&amp;lt;/span&amp;gt; &amp;lt;span class=&quot;ne-text&quot;&amp;gt;情况1：工作区干净&amp;lt;/span&amp;gt;&amp;lt;/h4&amp;gt;
&amp;lt;pre data-language=&quot;bash&quot; id=&quot;WQi54&quot; class=&quot;ne-codeblock language-bash&quot;&amp;gt;&amp;lt;code&amp;gt;$ git status
On branch master
nothing to commit, working tree clean&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p id=&quot;u0e2b9816&quot; class=&quot;ne-p&quot;&amp;gt;&amp;lt;span class=&quot;ne-text&quot;&amp;gt;意思是：没有文件被修改，也没有新增或删除。&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;h4 id=&quot;3e1a3f71&quot;&amp;gt;&amp;lt;span class=&quot;ne-text&quot; style=&quot;color: #DF2A3F&quot;&amp;gt;🟡&amp;lt;/span&amp;gt; &amp;lt;span class=&quot;ne-text&quot;&amp;gt;情况2：修改了文件但还没 add&amp;lt;/span&amp;gt;&amp;lt;/h4&amp;gt;
&amp;lt;pre data-language=&quot;bash&quot; id=&quot;ZGtno&quot; class=&quot;ne-codeblock language-bash&quot;&amp;gt;&amp;lt;code&amp;gt;$ git status
modified:   hello.txt&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p id=&quot;ufa272c14&quot; class=&quot;ne-p&quot;&amp;gt;&amp;lt;span class=&quot;ne-text&quot;&amp;gt;说明 &amp;lt;/span&amp;gt;&amp;lt;code class=&quot;ne-code&quot;&amp;gt;&amp;lt;span class=&quot;ne-text&quot;&amp;gt;hello.txt&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;&amp;lt;span class=&quot;ne-text&quot;&amp;gt; 有改动，但还没有被添加进暂存区。&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;h4 id=&quot;c160fd94&quot;&amp;gt;&amp;lt;span class=&quot;ne-text&quot;&amp;gt;🟢&amp;lt;/span&amp;gt; &amp;lt;span class=&quot;ne-text&quot;&amp;gt;情况3：已 add 到暂存区但还没 commit&amp;lt;/span&amp;gt;&amp;lt;/h4&amp;gt;
&amp;lt;pre data-language=&quot;bash&quot; id=&quot;L2q4R&quot; class=&quot;ne-codeblock language-bash&quot;&amp;gt;&amp;lt;code&amp;gt;$ git status
Changes to be committed:
(use &quot;git restore --staged &amp;lt;file&amp;gt;...&quot; to unstage)
modified:   hello.txt&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;/details&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、git diff —— 查看修改内容&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git diff
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;显示当前工作目录中未加入暂存区的变更（对比的是：工作区 ↔ 暂存区）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;你也可以用：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git diff hello.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;来查看某个具体文件的改动。&lt;/p&gt;
&lt;p&gt;&amp;lt;details class=&quot;lake-collapse&quot;&amp;gt;&amp;lt;summary id=&quot;u423a2fc5&quot;&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;span class=&quot;ne-text&quot;&amp;gt;补充&amp;lt;/span&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;/summary&amp;gt;&amp;lt;h4 id=&quot;k8LQy&quot;&amp;gt;&amp;lt;span class=&quot;ne-text&quot;&amp;gt;查看已经 add 但还未 commit 的差异：&amp;lt;/span&amp;gt;&amp;lt;/h4&amp;gt;&amp;lt;pre data-language=&quot;bash&quot; id=&quot;J3Z0b&quot; class=&quot;ne-codeblock language-git&quot;&amp;gt;&amp;lt;code&amp;gt;git diff --cached&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;p id=&quot;u52bf5124&quot; class=&quot;ne-p&quot;&amp;gt;&amp;lt;span class=&quot;ne-text&quot;&amp;gt;或者：&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;pre data-language=&quot;bash&quot; id=&quot;cEllX&quot; class=&quot;ne-codeblock language-git&quot;&amp;gt;&amp;lt;code&amp;gt;git diff --staged&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;h4 id=&quot;u539c&quot;&amp;gt;&amp;lt;span class=&quot;ne-text&quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span class=&quot;ne-text&quot;&amp;gt;作用：&amp;lt;/span&amp;gt;&amp;lt;/h4&amp;gt;&amp;lt;ul class=&quot;ne-ul&quot;&amp;gt;&amp;lt;li id=&quot;udf0dfced&quot; data-lake-index-type=&quot;0&quot;&amp;gt;&amp;lt;span class=&quot;ne-text&quot;&amp;gt;查看“暂存区”中与“上一次提交版本”之间的差异。&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/details&amp;gt;&lt;/p&gt;
&lt;h3&gt;4.文件恢复与版本回退&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;开发中你经常会遇到这些情况：&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;场景&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;想做的事&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;改错文件了&lt;/td&gt;
&lt;td&gt;想恢复回之前保存的版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;add 错文件了&lt;/td&gt;
&lt;td&gt;想撤回到未暂存状态&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;commit 之后后悔了&lt;/td&gt;
&lt;td&gt;想撤销或回退提交&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;改了很多但不想要了&lt;/td&gt;
&lt;td&gt;想恢复整个文件夹到之前状&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;本节主要命令：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git restore&lt;/code&gt;：恢复文件内容（推荐）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout&lt;/code&gt;：旧版本恢复（老派用法）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reset&lt;/code&gt;：取消暂存、版本回退&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log&lt;/code&gt;：查看历史提交&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;一、恢复工作区文件：&lt;/strong&gt;&lt;code&gt;git restore&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git restore &amp;lt;filename&amp;gt;

eg:
echo &quot;bad line&quot; &amp;gt;&amp;gt; hello.txt      # 加了一行错误内容
git restore hello.txt             # 撤销这次改动
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;把某个文件恢复到上一次 &lt;code&gt;git add&lt;/code&gt; 或 &lt;code&gt;git commit&lt;/code&gt; 之后的状态，&lt;strong&gt;取消你刚刚改的内容&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;背后原理：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从 Git 暂存区或仓库中拿出该文件的版本，覆盖当前工作区。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;二、撤销 &lt;strong&gt;&lt;code&gt;git add&lt;/code&gt;&lt;/strong&gt;：&lt;/strong&gt;&lt;code&gt;git restore --staged&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git restore --staged &amp;lt;filename&amp;gt;

eg:
git add hello.txt
git restore --staged hello.txt  #撤回add，但改动还在
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;作用：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;把文件从&lt;strong&gt;暂存区&lt;/strong&gt;移除，但保留工作区的改动。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用场景：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你 &lt;code&gt;git add&lt;/code&gt; 了一个不该提交的文件，可以用这条命令撤回。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;三、版本回退：&lt;/strong&gt;&lt;code&gt;git reset&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;命令：取消已经 add 的内容&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git reset filename
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;等效于上面那句 &lt;code&gt;git restore --staged&lt;/code&gt;，只是老一点的写法。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;命令：回退到上一个提交版本（慎用）&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git reset --hard HEAD
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;作用：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;把整个项目（工作区 + 暂存区）恢复到上一次提交的状态。&lt;/p&gt;
&lt;p&gt;❗❗ 注意：&lt;code&gt;--hard&lt;/code&gt; 是“硬回退”，&lt;strong&gt;不可恢复的清空当前修改&lt;/strong&gt;，一定要确认再用！&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;四、查看历史版本：&lt;/strong&gt;&lt;code&gt;git log&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;显示提交历史&lt;/li&gt;
&lt;li&gt;会看到一堆 &lt;code&gt;commit xxx...&lt;/code&gt; 的 ID、作者、时间、提交说明&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;git log

eg:
git log -p hello.txt	#查看历史内容改了什么
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;5.分支管理（分支的创建、切换、合并）&lt;/h3&gt;
&lt;p&gt;在实际开发中，我们经常会遇到这种需求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不打扰主线代码，先试试一个新功能&lt;/li&gt;
&lt;li&gt;多个开发人员各自写各自的功能&lt;/li&gt;
&lt;li&gt;想在多个版本之间切换工作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这时，就要用到「&lt;strong&gt;分支（branch）&lt;/strong&gt;」来隔离、管理不同的开发线。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;lt;font style=&quot;color:#DF2A3F;&quot;&amp;gt;补充对分支的理解，如我在main分支创建了a.txt （未add），此时创建dev分支可以看见main分支对a.txt的更改。但如果我在dev上commit之后，回到main之后则不存在a.txt文件了，就相当于两个工作区一样&amp;lt;/font&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Git 分支基本概念&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;主分支&lt;/strong&gt;：默认叫 &lt;code&gt;master&lt;/code&gt;（或 &lt;code&gt;main&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分支的本质&lt;/strong&gt;：一个指向某次提交的“指针”&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HEAD&lt;/strong&gt;：指向当前分支的位置（你正在干活的分支）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;**1.查看已有分支： **&lt;code&gt;git branch 分支名&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git branch
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;会列出当前所有分支，当前所在的分之前有&lt;code&gt;*&lt;/code&gt;标记&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;2.创建新分支：&lt;/strong&gt;&lt;code&gt;git branch 分支名&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git branch dev
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;创建一个名为dev的新分支，复制自当前分支的最新提交。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;3.切换分支：&lt;/strong&gt;&lt;code&gt;git switch 分支名&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git switch dev
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;此时已切换dev分支，开始在上面开发了&lt;/li&gt;
&lt;li&gt;如果是老版本Git，也可以用&lt;code&gt;git checkout dev&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;4.创建并切换新分支：一条命令搞定&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git switch -c dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;相当于：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git branch dev
git switch dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Git 会尝试把&lt;code&gt;dev&lt;/code&gt;上的改动合并进master，如果没有冲突，会自动完成。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;5.合并分支：&lt;code&gt;git merge&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;切换会主分支后，合并新分支的内容：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git switch main
git merge dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Git 会尝试把&lt;code&gt;dev&lt;/code&gt;上的改动合并进main，如果没有冲突，会自动完成。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;6.删除分支（合并后清理）：&lt;code&gt;git branch -d&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git branch -d dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果你确认合并完了，就可以删掉旧分支。&lt;/p&gt;
&lt;h3&gt;6.搭建ssh远程连接（无需梯子）&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;一、配置git bash&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在git bash中运行以下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh-keygen -t ed25519 -C &quot;你的GitHub邮箱&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当提示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Enter file in which to save the key (~/.ssh/id_ed25519):
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;你可以直接回车（会覆盖旧的 id_ed25519）&lt;br /&gt;
或者输入一个新名字，比如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;~/.ssh/id_ed25519_laptop
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;二、启用新的ssh key&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;eval &quot;$(ssh-agent -s)&quot;

ssh-add ~/.ssh/id_ed25519_laptop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;三、把公钥加到Github&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat ~/.ssh/id_ed25519_laptop.pub
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;复制整段（从 &lt;code&gt;ssh-ed25519&lt;/code&gt; 开始到最后），&lt;br /&gt;
然后在 GitHub → &lt;strong&gt;Settings&lt;/strong&gt; → &lt;strong&gt;SSH and GPG keys&lt;/strong&gt; → &lt;strong&gt;New SSH key&lt;/strong&gt; → 粘贴保存。&lt;br /&gt;
标题建议写成 “Laptop - 2025” 这种好区分的名字。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;四、验证&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh -T git@github.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;看到：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Hi Sirens007! You&apos;ve successfully authenticated...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;说明配置成功&lt;/p&gt;
&lt;h3&gt;7.远程仓库操作&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1.远程仓库概念&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本地 Git 仓库 = 你电脑上的版本库（&lt;code&gt;.git&lt;/code&gt; 目录）。&lt;br /&gt;
远程仓库 = 存在于服务器（比如 GitHub）上的版本库。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.四个常用操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（1）clone - 从远程仓库下载到本地&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/Sirens007/MyStorage.git

#运行后，你本地就有一个 myproject 目录，并且可以直接 git pull 或 git push。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;会在本地新建一个文件夹&lt;/li&gt;
&lt;li&gt;自动把该仓库的所有版本历史下载到本地&lt;/li&gt;
&lt;li&gt;自动设置好 &lt;code&gt;origin&lt;/code&gt; 这个远程名，指向该仓库&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;（2）remote - 管理远程仓库地址&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;查看已有远程：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git remote -v
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;添加远程：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git remote add origin https://github.com/Sirens007/MyStorage.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改远程：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git remote set-url origin &amp;lt;新地址&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;删除远程：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git remote remove origin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;origin&lt;/code&gt; 是默认的远程仓库名字，你也可以用别的名字。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;（3）push - 推送本地代码到远程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第一次推送（如果远程没有内容）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git push -u origin main
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;解释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;origin&lt;/code&gt;：远程仓库名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main&lt;/code&gt;：分支名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-u&lt;/code&gt;：记住这个推送目标，下次可以直接&lt;code&gt;git push&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之后推送就可以：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git push
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;（4）pull - 从远程拉取最新版本&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git pull origin main
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把远程 main 分支的最新提交下载到本地&lt;/li&gt;
&lt;li&gt;并与本地当前分支合并&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果远程没有变化，你会看到：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Already up to date.
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;（5）远程分支与本地分支的关系&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当你执行 &lt;code&gt;git clone&lt;/code&gt; 或 &lt;code&gt;git fetch&lt;/code&gt; 后，Git 会在本地维护远程分支的快照，叫做 &lt;strong&gt;远程跟踪分支&lt;/strong&gt;，格式一般是 &lt;code&gt;origin/分支名&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;本地分支和远程分支是分开的，推送（&lt;code&gt;push&lt;/code&gt;）和拉取（&lt;code&gt;pull&lt;/code&gt;）就是它们之间的同步操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;（6）查看远程分支&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git branch -r
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;只列出远程仓库的分支&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;git branch -a
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;本地和远程所有分支都会显示&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;（7）跟踪远程分支的新建本地分支&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果远程有个分支，你想在本地工作，需要先新建一个本地分支跟踪远程：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git switch-c dev origin/dev
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;这会基于远程&lt;code&gt;dev&lt;/code&gt;分支新建本地&lt;code&gt;dev&lt;/code&gt;分支&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;（8）远程仓库冲突解决&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;多人合作时，推送可能被拒绝，提示远程有更新需要先拉取：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git push
To https://github.com/xxx.git
 ! [rejected]        main -&amp;gt; main (fetch first)
error: failed to push some refs to &apos;https://github.com/xxx.git&apos;
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这时，需要先拉取远程的最新修改：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git pull --rebase origin main
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--rebase&lt;/code&gt; 表示把你的提交“挪到”最新远程修改之后，避免额外合并提交。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;（9）查看远程仓库详情&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git remote show origin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;远程分支状态&lt;/li&gt;
&lt;li&gt;你本地分支对应的上游分支&lt;/li&gt;
&lt;li&gt;是否有可推送或拉取的内容&lt;/li&gt;
&lt;/ul&gt;
</content:encoded></item><item><title>GitHub Pages配置</title><link>https://sirens007.github.io/posts/github%E7%BD%91%E7%AB%99%E9%85%8D%E7%BD%AE/</link><guid isPermaLink="true">https://sirens007.github.io/posts/github%E7%BD%91%E7%AB%99%E9%85%8D%E7%BD%AE/</guid><description>一篇关于建立GitHub Pages博客的文章.</description><pubDate>Wed, 27 Aug 2025 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;环境依赖&lt;/h1&gt;
&lt;p&gt;在开始使用 Mizuki 之前，您需要确保系统满足以下要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Node.js &amp;gt;= 20&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pnpm &amp;gt;= 9&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Git&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;安装Node.js&lt;/h2&gt;
&lt;p&gt;访问 &lt;a href=&quot;https://nodejs.org/&quot;&gt;Node.js 官网&lt;/a&gt; 下载并安装最新版本的 Node.js。建议使用 LTS 版本。&lt;/p&gt;
&lt;p&gt;安装完成后，打开终端或命令提示符，运行以下命令验证 Node.js 是否安装成功：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node -v
npm -v
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果显示版本号，则表示安装成功。&lt;/p&gt;
&lt;h2&gt;安装pnpm&lt;/h2&gt;
&lt;p&gt;如果您尚未安装 pnpm，可以通过 npm 安装：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install -g pnpm
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装完成后，打开终端或命令提示符，运行以下命令验证 pnpm 是否安装成功：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pnpm -v
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果显示版本号，则表示安装成功。&lt;/p&gt;
&lt;h2&gt;安装Git&lt;/h2&gt;
&lt;p&gt;访问 &lt;a href=&quot;https://git-scm.com/downloads&quot;&gt;Git 官网&lt;/a&gt; 下载并安装适合您操作系统的 Git 版本。&lt;/p&gt;
&lt;p&gt;安装完成后，打开终端或命令提示符，运行以下命令验证 Git 是否安装成功：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git --version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果显示版本号，则表示安装成功。&lt;/p&gt;
&lt;h1&gt;项目启动&lt;/h1&gt;
&lt;h2&gt;1.克隆项目&lt;/h2&gt;
&lt;p&gt;首先将模板拉下到本地仓库&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/matsuzaka-yuki/Mizuki.git
cd ...//cd到项目地址处
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;2.安装依赖&lt;/h2&gt;
&lt;p&gt;使用 pnpm 安装项目依赖：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pnpm install
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;3.配置博客&lt;/h2&gt;
&lt;p&gt;在启动项目之前，您需要根据自己的需求进行配置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编辑 &lt;code&gt;src/config.ts&lt;/code&gt; 文件来自定义博客设置&lt;/li&gt;
&lt;li&gt;更新站点信息、主题颜色、横幅图片和社交链接&lt;/li&gt;
&lt;li&gt;配置翻译设置和特殊页面功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;4.启动开发服务器&lt;/h2&gt;
&lt;p&gt;运行以下命令启动开发服务器：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pnpm dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;启动成功后，您可以在浏览器中访问 &lt;code&gt;http://localhost:4321&lt;/code&gt; 查看您的博客。&lt;/p&gt;
&lt;h2&gt;5.打包网站&lt;/h2&gt;
&lt;p&gt;在本地项目处运行以下命令将网站打包成静态文件，生成到 &lt;code&gt;dist&lt;/code&gt; 目录中：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pnpm build
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;生成的 &lt;code&gt;dist&lt;/code&gt; 目录可以部署到您自己的服务器上。&lt;/p&gt;
&lt;h1&gt;部署到GitHub Pages&lt;/h1&gt;
&lt;p&gt;如果您希望将博客托管在 GitHub Pages 上，Mizuki 项目通常会包含一个 GitHub Actions 工作流，可以帮助您自动化部署过程。您需要确保在 &lt;code&gt;astro.config.mjs&lt;/code&gt; 中配置正确的 &lt;code&gt;base&lt;/code&gt; 路径。&lt;/p&gt;
&lt;p&gt;还有将&lt;code&gt;package.json&lt;/code&gt;的script中加入&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &quot;scripts&quot;: {
    &quot;build&quot;: &quot;vite build&quot;,  
    &quot;deploy&quot;: &quot;gh-pages -d dist -r https://github.com/&amp;lt;你的用户名&amp;gt;/&amp;lt;你的仓库名&amp;gt;.git&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;总共要改的配置文件为&lt;code&gt;astro.config.mjs&lt;/code&gt;、&lt;code&gt;package.json&lt;/code&gt;、&lt;code&gt;src/config.ts&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;部署到 github.io 网址&lt;/h2&gt;
&lt;p&gt;在 &lt;code&gt;astro.config.mjs&lt;/code&gt; 中配置文件设置 &lt;code&gt;site&lt;/code&gt; 和 &lt;code&gt;base&lt;/code&gt; 选项。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import { defineConfig } from &apos;astro/config&apos;

export default defineConfig({
  site: &apos;https://sirens007.github.io/&apos;,
  base: &apos;/&apos;,
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Site&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;site&lt;/code&gt; 的值必须是以下之一：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于你的用户名的以下网址: &lt;code&gt;https://&amp;lt;username&amp;gt;.github.io&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;为 GitHub 组织的私有页面 自动生成的随机网址：&lt;code&gt;https://&amp;lt;random-string&amp;gt;.pages.github.io/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果出现了以下情况，则不要设置 base 参数：&lt;/p&gt;
&lt;p&gt;你的页面是由根文件夹所提供。&lt;/p&gt;
&lt;p&gt;你的源码存储库是位于 https://github.com/&amp;lt;USERNAME&amp;gt;/&amp;lt;USERNAME&amp;gt;.github.io。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Base&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;base&lt;/code&gt; 的值应该是你的仓库名称，以正斜杠开头，例如 &lt;code&gt;/my-blog&lt;/code&gt;。这样做是为了让 Astro 理解你的网站根目录是 &lt;code&gt;/my-repo&lt;/code&gt;，而不是默认的 &lt;code&gt;/&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当配置了这个值后，你所有的内部页面链接都必须以你的 base 值作为前缀：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&quot;/my-repo/about&quot;&amp;gt;关于本站&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看更多关于配置 &lt;a href=&quot;https://docs.astro.build/zh-cn/reference/configuration-reference/#base&quot;&gt;base&lt;/a&gt; 值的信息。&lt;/p&gt;
&lt;h2&gt;（可选）在GitHub Pages上使用自定义域名&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;设置一个自定义域&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你可以选择通过将一个 ./public/CNAME 文件添加到你的项目中，来设置自定义域&lt;/p&gt;
&lt;p&gt;这会将你的站点部署在你的自定义域而不是 &amp;lt;YOUR_USERNAME&amp;gt;.github.io。&lt;/p&gt;
&lt;p&gt;不要忘记为你的域名提供商配置 DNS。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要配置 Astro 以在 GitHub Pages 上使用自定义域名，请将你的域名设置为 site 的值。不要为 &lt;code&gt;base&lt;/code&gt; 设置值：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import { defineConfig } from &apos;astro/config&apos;

export default defineConfig({
    site: &apos;https://example.com&apos;,
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;方法一：配置GitHub Action&lt;/h2&gt;
&lt;p&gt;在你的项目中的 &lt;code&gt;.github/workflows/&lt;/code&gt; 目录创建一个新文件 &lt;code&gt;deploy.yml&lt;/code&gt;，并粘贴以下 YAML 配置信息。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;name: Deploy to GitHub Pages

on:
# 每次推送到 `main` 分支时触发这个“工作流程”
# 如果你使用了别的分支名，请按需将 `main` 替换成你的分支名
push:
    branches: [ main ]
# 允许你在 GitHub 上的 Actions 标签中手动触发此“工作流程”
workflow_dispatch:

# 允许 job 克隆 repo 并创建一个 page deployment
permissions:
contents: read
pages: write
id-token: write

jobs:
build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout your repository using git
        uses: actions/checkout@v4
    - name: Install, build, and upload your site
        uses: withastro/action@v3
        # with:
        # path: . # 存储库中 Astro 项目的根位置。（可选）
        # node-version: 20 # 用于构建站点的特定 Node.js 版本，默认为 20。（可选）
        # package-manager: pnpm@latest # 应使用哪个 Node.js 包管理器来安装依赖项和构建站点。会根据存储库中的 lockfile 自动检测。（可选）

deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
    name: github-pages
    url: ${{ steps.deployment.outputs.page_url }}
    steps:
    - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（可选）如果你在本地开发期间或预览构建期间，将环境变量传入给 Astro 项目，则需要定义 deploy.yml 文件中的任何公共变量，以便在部署到 Github 页面时处理它们。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jobs:
build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout your repository using git
        uses: actions/checkout@v4
    - name: Install, build, and upload your site
        uses: withastro/action@v3
        env:
        # 使用单引号来包裹变量值
        PUBLIC_EVM_WALLET_ADDRESS: &apos;0x4bFc229A40d41698154336aFF864f61083E76659&apos;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;在 GitHub 上，跳转到存储库的 Settings 选项卡并找到设置的 Pages 部分。&lt;/li&gt;
&lt;li&gt;选择 GitHub Actions 作为你网站的 Source，然后按 Save。&lt;/li&gt;
&lt;li&gt;选择 GitHub Actions 作为你网站的 Source，然后按 Save。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;你的网站现在应该已完成发布了！当你将更改推送到 Astro 项目的存储库时，GitHub Action 将自动为你部署它们。&lt;/p&gt;
&lt;h2&gt;方法二：增加gh-pages分支&lt;/h2&gt;
&lt;h2&gt;安装部署&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;pnpm add -D gh-pages
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装 &lt;code&gt;gh-pages&lt;/code&gt; 包，它会帮你把 &lt;code&gt;dist/&lt;/code&gt; 目录推送到 GitHub 仓库的 &lt;code&gt;gh-pages&lt;/code&gt; （自动创建）分支。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;运行命令&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pnpm run build&lt;/code&gt; → 生成 &lt;code&gt;dist/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pnpm run deploy&lt;/code&gt; → 自动把 &lt;code&gt;dist/&lt;/code&gt; 上传到 GitHub Pages&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;日常维护&lt;/h1&gt;
&lt;h4&gt;1.修改/新增文章或页面&lt;/h4&gt;
&lt;p&gt;在本地项目里（比如 &lt;code&gt;src/content&lt;/code&gt;、&lt;code&gt;posts&lt;/code&gt;、&lt;code&gt;pages&lt;/code&gt; 等目录），新建或修改 Markdown/HTML/JSX 文件。&lt;/p&gt;
&lt;h4&gt;2. 重新构建&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;pnpm build
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：把修改后的源代码再打包到 &lt;code&gt;dist/&lt;/code&gt; 目录。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;原因&lt;/strong&gt;：GitHub Pages 只会展示 &lt;code&gt;dist&lt;/code&gt; 文件夹里的内容，而不会读取你的源代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3. 部署到 GitHub Pages&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;pnpm run deploy
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：自动运行 &lt;code&gt;gh-pages -d dist&lt;/code&gt;，把最新的 &lt;code&gt;dist/&lt;/code&gt; 推送到 &lt;code&gt;gh-pages&lt;/code&gt; 分支。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;原因&lt;/strong&gt;：GitHub Pages 是根据 &lt;code&gt;gh-pages&lt;/code&gt; 分支的内容来渲染你的网站的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.mizuki.mysqil.com/guide/deployment/#%E9%85%8D%E7%BD%AE-github-action&quot;&gt;部署 | Mizuki主题官方文档&lt;/a&gt;&lt;/p&gt;
</content:encoded></item><item><title>Git基础命令</title><link>https://sirens007.github.io/posts/git%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</link><guid isPermaLink="true">https://sirens007.github.io/posts/git%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</guid><description>一篇关于 Git基础命令的笔记.</description><pubDate>Wed, 20 Aug 2025 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;📝Git工作流程&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/photo1.png&quot; alt=&quot;photo1&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;1.克隆仓库&lt;/h3&gt;
&lt;p&gt;如果你要参与一个已有的项目，通常会创建一个新的分支：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/username/repo.git
cd repo
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;2.创建新分支&lt;/h3&gt;
&lt;p&gt;为了避免直接在main或master分支上进行开发，通常会创建一个新的分支：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout -b new-feature
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;3.工作目录&lt;/h3&gt;
&lt;p&gt;在工作目录中进行代码编辑、添加新文件或删除不需要的文件。&lt;/p&gt;
&lt;h3&gt;4.暂存文件&lt;/h3&gt;
&lt;p&gt;将修改的文件添加到暂存区，以便进行下一步的提交操作：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add filename
# 或者添加所有修改的文件
git add .
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;5.提交更改&lt;/h3&gt;
&lt;p&gt;将暂存区的更改提交到本地仓库，并添加提交信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git commit -m &quot;Add new feature&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;6.拉取最新更改&lt;/h3&gt;
&lt;p&gt;推送本地更改之前，最好从远程仓库拉取最新的更改，以避免冲突：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git pull origin main
# 或者如果在新的分支上工作
git pull origin new-feature
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;7.推送更改&lt;/h3&gt;
&lt;p&gt;将本地的提交推送到远程仓库：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git push origin new-feature
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;8.创建Pull Request（PR）&lt;/h3&gt;
&lt;p&gt;在github或其他托管平台上创建Pull Request，邀请团队成员进行代码审查。PR合并后，你的更改就会合并到主分支。&lt;/p&gt;
&lt;h3&gt;9.合并更改&lt;/h3&gt;
&lt;p&gt;在PR审核通过并合并后，可以将远程仓库的主分支合并到本地分支：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout main
git pull origin main
git merge new-feature
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;10.删除分支&lt;/h3&gt;
&lt;p&gt;如果不需要新功能分支，可以将其删除：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git branch -d new-feature
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;或者从远程仓库删除分支：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git push origin --delete new-feature
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;📝Git创建仓库&lt;/h2&gt;
&lt;h3&gt;git init&lt;/h3&gt;
&lt;p&gt;Git使用git init命令来初始化一个Git仓库，Git的很多命令都需要在Git的仓库中运行，所以git init是使用Git的第一个命令。&lt;/p&gt;
&lt;p&gt;在执行完git init命令后，Git仓库会生成一个.git目录，该目录包含了资源的所有元数据，其他的项目目录保持不变。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;进入想要创建仓库的目录，或者先创建一个新的目录：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir my-project
cd my-project
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用当前目录作为Git仓库，我们只需使用它初始化。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;该命令执行完成后会在当前目录生成一个.git目录。&lt;/p&gt;
&lt;p&gt;使用我们指定目录作为Git仓库。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git init newrepo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;初始化后，会在newrepo目录下会出现一个名为.git的目录，所有Git需要的数据和资源都存放在这个目录中。&lt;/p&gt;
&lt;p&gt;如果当前目录下有几个文件想要纳入版本控制，需要先使用git add 命令告诉Git开始对这些文件进行跟踪，然后提交：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add *.c 	 #将所有.c文件纳入版本控制
git add README #添加README文件（一般为项目说明文档），可以是README.md、README.txt
git commit -m &apos;初始化项目版本&apos;  #
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以上命令将目录一下以 .c 结尾及README文件提交到仓库中。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt; 在Linux系统中，commit信息使用单引号 &apos; ，Windows系统，commit信息使用双引号&quot;。&lt;/p&gt;
&lt;p&gt;所以在git bash中 git commit -m &apos;提交说明&apos; 这样是可以的，在Windows命令行中就要使用双引号 git commit -m &quot;提交说明&quot;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;git clone&lt;/h3&gt;
&lt;p&gt;我们使用git clone 从现有的Git仓库中拷贝项目（类似svn checkout）。&lt;/p&gt;
&lt;p&gt;克隆仓库的命名格式为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone &amp;lt;repo&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果我们需要克隆到指定的目录，可以使用以下命令格式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone &amp;lt;repo&amp;gt; &amp;lt;directory&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参数说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;repo:Git仓库&lt;/li&gt;
&lt;li&gt;directory:本地仓库&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如，要克隆Ruby语言的Git代码仓库Grit，可以用下面的命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone git://github.com/Sirens007/MyStorage.git Mystorage
#git:为Git专属协议，类似https

#git clone git://github.com/Sirens007/MyStorage.git 是仓库地址，指向Github上名为MyStorage的仓库
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;git的设置使用 git config 命令&lt;/p&gt;
&lt;p&gt;显示当前的git配置信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git config --list
#输出以下信息
credential.helper=osxkeychain
core.repositoryformatversion=0
core.filemode=true
core.bare=false
core.logallrefupdates=true
core.ignorecase=true
core.precomposeunicode=true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;编辑git配置文件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git config -e	#针对当前仓库
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;或者：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git config -e --global	#针对系统上所有仓库
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;设置提交代码时的用户信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git config --global user.name &quot;Sirens007&quot;
git config --global user.email &quot;2921646312@qq.com&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果去掉 --global参数支队当前仓库有效。&lt;/p&gt;
&lt;h2&gt;Git基本操作&lt;/h2&gt;
&lt;p&gt;&amp;lt;font style=&quot;color:rgb(51, 51, 51);&quot;&amp;gt;Git 的工作就是创建和保存你项目的快照及与之后的快照进行对比。&amp;lt;/font&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;font style=&quot;color:rgb(51, 51, 51);&quot;&amp;gt;本章将对有关创建与提交你的项目快照的命令作介绍。&amp;lt;/font&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;font style=&quot;color:rgb(51, 51, 51);&quot;&amp;gt;Git常用的是以下6个命令：git clone、git push、git add、git commit、git checkout、git pull，之后会详细介绍&amp;lt;/font&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/photo2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;workplace：工作区&lt;/li&gt;
&lt;li&gt;staging area：暂存区/缓存区&lt;/li&gt;
&lt;li&gt;local repository：版本库或本地仓库&lt;/li&gt;
&lt;li&gt;remote  respository：远程仓库&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个简单的操作步骤：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git init
git add
git commit
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;git init - 初始化仓库。&lt;/li&gt;
&lt;li&gt;git add - 添加文件到暂存区。&lt;/li&gt;
&lt;li&gt;git commit - 将暂存区内容添加到仓库中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;创建仓库命令&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;git创建仓库的命令：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;git init&lt;/td&gt;
&lt;td&gt;初始化仓库&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;git clone&lt;/td&gt;
&lt;td&gt;拷贝一份远程仓库，也就是下载一个项目&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;提交与修改&lt;/h3&gt;
&lt;p&gt;Git的工作就是创建和保存你的项目的快照及与之后的快照进行对比。&lt;/p&gt;
&lt;p&gt;下表列出有关创建与提交你的项目的快照的命令：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;git add&lt;/td&gt;
&lt;td&gt;添加文件到暂存区&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;git status&lt;/td&gt;
&lt;td&gt;查看仓库当前的状态，显示有变更的文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;git diff&lt;/td&gt;
&lt;td&gt;比较文件的不同，即暂存区和工作区的差异&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;git difftool&lt;/td&gt;
&lt;td&gt;使用外部差异工具查看和比较文件的更改&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;git range-diff&lt;/td&gt;
&lt;td&gt;比较两个提交范围之间的差异&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;git commit&lt;/td&gt;
&lt;td&gt;提交暂存区到本地仓库&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;git reset&lt;/td&gt;
&lt;td&gt;回退版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;git rm&lt;/td&gt;
&lt;td&gt;将文件从暂存区和工作区中删除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;git mv&lt;/td&gt;
&lt;td&gt;移动或重命名工作区文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;git notes&lt;/td&gt;
&lt;td&gt;添加注释&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;git checkout&lt;/td&gt;
&lt;td&gt;分支切换&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;git switch（Git 2.23版本）&lt;/td&gt;
&lt;td&gt;更清晰地切换分支&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;git restore（Git 2.23版本）&lt;/td&gt;
&lt;td&gt;恢复或撤销文件的更改&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;git show&lt;/td&gt;
&lt;td&gt;显示Git对象的详细信息&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;提交日志&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;git log&lt;/td&gt;
&lt;td&gt;查看历史提交记录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;git blame &amp;lt;file&amp;gt;&lt;/td&gt;
&lt;td&gt;以列表形式查看指定文件的历史修改记录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;git shortlog&lt;/td&gt;
&lt;td&gt;生成简洁的提交日志摘要&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;git describe&lt;/td&gt;
&lt;td&gt;生成一个可读的字符串，该字符串基于Git的标签系统来描述当前的提交&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;远程操作&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;git remote&lt;/td&gt;
&lt;td&gt;远程仓库操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;git fetch&lt;/td&gt;
&lt;td&gt;从远程获取代码库&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;git pull&lt;/td&gt;
&lt;td&gt;下载远程代码并合并&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;git push&lt;/td&gt;
&lt;td&gt;上传远程代码并合并&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;git submodule&lt;/td&gt;
&lt;td&gt;管理包含其他Git仓库的项目&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Git文件状态&lt;/h3&gt;
&lt;p&gt;Git的文件状态分为三种：工作目录（Working Directory）、暂存区（Staging Area）、本地仓库（Local Repository）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;工作目录（Working Directory）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;工作目录是你在本地计算机上看到的项目文件。它是你实际操作文件的地方，包括查看、编辑、删除和创建文件。所有对文件的更改首先发生在工作目录中。&lt;/p&gt;
&lt;p&gt;在工作目录中的文件可能有以下几种状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;未跟踪（Untracked）：新创建的文件，未被Git记录。&lt;/li&gt;
&lt;li&gt;已修改（Modified）：已被Git跟踪的文件发生了更改，但这些更改还没有被提交到Git记录中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;暂存区（Staging Area）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;暂存区，也被称为索引（Index），是一个临时存储区域，用于保存即将提交到本地仓库的更改。你可以选择性地将工作目录中的更改添加到暂存区中，这样你就可以一次提交多个文件的更改，而不必提交所有文件的更改。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用git add &amp;lt;filename&amp;lt;filename&amp;gt;&amp;gt; 命令将文件从工作目录添加到暂存区。&lt;/li&gt;
&lt;li&gt;使用git add . 命令将当前目录下的所有更改添加到暂存区。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;本地仓库（Local Respository）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本地仓库是一个隐藏在 .git 目录中的数据库，用于存储项目的所有提交历史记录。每次你提交更改时，Git会将暂存区中的内容保存到本地仓库中。&lt;/p&gt;
&lt;p&gt;使用 git commit -m &quot;commit message&quot; 命令将暂存区中的更改提交到本地仓库。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;文件状态的转换流程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;未跟踪（Untracked）：&lt;/strong&gt; 新创建的文件最初是未跟踪的。它们存在于工作目录中，但没有被Git跟踪。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;git add  newfile.txt  	# 添加文件到暂存区&lt;/p&gt;
&lt;p&gt;git status           	       # 查看状态，显示 newfile.txt 在暂存区&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;已跟踪（Tracked）：&lt;/strong&gt;      通过git add 命令将未跟踪的文件添加到暂存区后，文件变为已跟踪状态。&lt;/p&gt;
</content:encoded></item></channel></rss>